{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red224\green224\blue224;\red215\green215\blue215;
}
{\*\expandedcolortbl;;\csgray\c0;\cssrgb\c90353\c90353\c90353\c66519;\csgenericrgb\c84314\c84314\c84314;
}
\margl1440\margr1440\vieww24380\viewh14580\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs30 \cf0 Some specs:\
- Programming language: Swift v3.1\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1\fs28 \cf2 \cb3 \CocoaLigature0 Apple Swift version 3.1 (swiftlang-802.0.53 clang-802.0.42)\
Target: x86_64-apple-macosx10.9\cf0 \cb4 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs30 \cf0 \cb1 \CocoaLigature1 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 - Developed using XCode 8.3.3 (8E3004b)\
- Developed and tested on macOS Sierra v10.12.5\
\
Control flow and core classes:\
- AppDelegate is the entry point, with all the UI outlets and actions. \
- There are 3 layers: 1- AppDelegate (UI), 2- PlayerDelegate (middleman), and 3- Player (actual audio player)\
- AppDelegate delegates all requests from the UI, to PlayerDelegate, which marshals requests as necessary, and forwards them to Player, which provides all the playback/tuning functionality. \
- Player is a wrapper around AVAudioEngine. AVPlayerNode is the player, and other node objects (EQ, Pitch shift, Reverb, Mixer) form a chain, from input to output.\
- BufferManager schedules the buffers that are played by the player node.\
- AsyncMessenger handles event publishing/subscription to forward event notifications across the different layers of the app.\
- Custom views, under the "Views" source code group, customize the look and feel of the UI, and provide the playlist view's data.\
- Classes in the "IO" source group perform all the app config and playlist/track I/O.\
- TrackIO performs lazy loading of track info, to keep memory usage low and speed up app load time. Only basic info (title, duration) is retrieved at first. Then, for playback, more information is retrieved. Finally, if the \'93more info\'94 panel is opened, all details are loaded.\
- Some reused utilities are under the "Utils" source code group. \
- MemoryMonitor can be used to keep an eye on memory usage and kill the app if a memory leak is suspected. Runs as a daemon task in a background thread. Execution interval can be configured.\
\
Testing (with TimerUtils)\
- Timer and TimerUtils are not necessary for app functionality. They are merely for some performance testing. They allow you to measure code execution times and can be easily and concisely inserted inline in your code, like so:\
\
<code>\
let timer = TimerUtils.start("myFunction")\
\
... // call myFunction()\
\
timer.end()\
...\
// Create and use as many timers as you need in your app\
...\
TimerUtils.printStats() // Prints stats for all timers\
</code>\
\
App config:\
- A config file (JSON format) is stored (by the code) in the default user's Documents directory. It is written to upon exit and read from at startup. This file stores the player state - track list, volume, and all sound settings . Make sure this is accessible, otherwise, config will not be remembered each time the player starts up and defaults will be used.\
\
A word of caution:\
- Race conditions may occur within BufferManager, because it uses a timer to constantly schedule audio buffers during playback. As seeking within a track occurs or a track is changed, these timers are deallocated, but already executing tasks may dereference dead pointers. StoppableRepeatingTaskExecutor was written to solve this problem, but the possibility still exists.\
\
Icons:\
- All necessary icons are provided in /Aural/Assets.xcassets\
\
TODOs:\
- A list of possible additional features to implement, is listed in Developer-TODOs.rtf\
\
Happy developing :)}